package isn.gui;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;

import javax.swing.JFrame;

public class Window {
	
	public void run(){
        JFrame f = new JFrame("ImageDrawing");
        f.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
            //    System.exit(0);
            }
        });
        URL imageSrc = null;
        try {
             imageSrc = ((new File(imageFileName)).toURI()).toURL();
        } catch (MalformedURLException e) {
        }
        ImageDrawingApplet id = new ImageDrawingApplet(imageSrc);
        id.buildUI();
        f.add("Center", id);
        f.pack();
        f.setVisible(true);
	}
//	// We need to strongly reference callback instances.
//	private GLFWErrorCallback errorCallback;
//	private GLFWKeyCallback   keyCallback;
//
//	// The window handle
//	private long window;
//
//	public void run() {
//		System.out.println("Hello LWJGL " + Version.getVersion() + "!");
//
//		try {
//			init();
//			loop();
//
//			// Release window and window callbacks
//			GLFW.glfwDestroyWindow(window);
//			keyCallback.release();
//		} finally {
//			// Terminate GLFW and release the GLFWErrorCallback
//			GLFW.glfwTerminate();
//			errorCallback.release();
//		}
//	}
//
//	private void init() {
//		// Setup an error callback. The default implementation
//		// will print the error message in System.err.
//		GLFW.glfwSetErrorCallback(errorCallback = GLFWErrorCallback.createPrint(System.err));
//
//		// Initialize GLFW. Most GLFW functions will not work before doing this.
//		if ( GLFW.glfwInit() != GLFW.GLFW_TRUE )
//			throw new IllegalStateException("Unable to initialize GLFW");
//
//		// Configure our window
//		GLFW. glfwDefaultWindowHints(); // optional, the current window hints are already the default
//		GLFW.glfwWindowHint(GLFW.GLFW_VISIBLE, GLFW.GLFW_FALSE); // the window will stay hidden after creation
//		GLFW.glfwWindowHint(GLFW.GLFW_RESIZABLE, GLFW.GLFW_TRUE); // the window will be resizable
//
//		int WIDTH = 300;
//		int HEIGHT = 300;
//
//		// Create the window
//		window = GLFW.glfwCreateWindow(WIDTH, HEIGHT, "Hello World!", MemoryUtil.NULL, MemoryUtil.NULL);
//		if (window == MemoryUtil.NULL)
//			throw new RuntimeException("Failed to create the GLFW window");
//
//		// Setup a key callback. It will be called every time a key is pressed, repeated or released.
//		GLFW.glfwSetKeyCallback(window, keyCallback = new GLFWKeyCallback() {
//			@Override
//			public void invoke(long window, int key, int scancode, int action, int mods) {
//				if ( key == GLFW.GLFW_KEY_ESCAPE && action == GLFW.GLFW_RELEASE )
//					GLFW.glfwSetWindowShouldClose(window, GLFW.GLFW_TRUE); // We will detect this in our rendering loop
//			}
//		});
//
//		// Get the resolution of the primary monitor
//		GLFWVidMode vidmode = GLFW.glfwGetVideoMode(GLFW.glfwGetPrimaryMonitor());
//		// Center our window
//		GLFW.glfwSetWindowPos(
//				window,
//				(vidmode.width() - WIDTH) / 2,
//				(vidmode.height() - HEIGHT) / 2
//				);
//
//		// Make the OpenGL context current
//		GLFW.glfwMakeContextCurrent(window);
//		// Enable v-sync
//		GLFW.glfwSwapInterval(1);
//
//		// Make the window visible
//		GLFW.glfwShowWindow(window);
//	}
//
//	private void loop() {
//		// This line is critical for LWJGL's interoperation with GLFW's
//		// OpenGL context, or any context that is managed externally.
//		// LWJGL detects the context that is current in the current thread,
//		// creates the GLCapabilities instance and makes the OpenGL
//		// bindings available for use.
//		GL.createCapabilities();
//
//		// Set the clear color
//		GL11.glClearColor(1.0f, 0.0f, 0.0f, 0.0f);
//
//		// Run the rendering loop until the user has attempted to close
//		// the window or has pressed the ESCAPE key.
//		while (GLFW.glfwWindowShouldClose(window) == GLFW.GLFW_FALSE ) {
//			GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT); // clear the framebuffer
//
//			GLFW.glfwSwapBuffers(window); // swap the color buffers
//
//			// Poll for window events. The key callback above will only be
//			// invoked during this call.
//			GLFW.glfwPollEvents();
//		}
//	}
//	
//	private void Create(SurfaceFormat format)
//    {
//        textureHandle = (uint)GL.GenTexture();
//        //bind texture
//        GL.BindTexture(TextureTarget.Texture2D, textureHandle);
//        Log.Error("Bound Texture: " + GL.GetError());
//        GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
//        GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMagFilter, (int)TextureMagFilter.Nearest);
//        GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureWrapS, (int)format.WrapMode);
//        GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureWrapT, (int)format.WrapMode);
//        Log.Error("Created Texture Parameters: " + GL.GetError());
//        GL.TexImage2D(TextureTarget.Texture2D, 0, format.InternalFormat, Width, Height, 0, format.PixelFormat, format.SourceType, format.Pixels);
//        Log.Error("Created Image: " + GL.GetError());
//        //unbind texture
//        GL.BindTexture(TextureTarget.Texture2D, 0);
//
//        //create fbo
//        fboHandle = (uint)GL.GenFramebuffer();
//        GL.BindFramebuffer(FramebufferTarget.Framebuffer, fboHandle);
//        GL.FramebufferTexture2D(FramebufferTarget.FramebufferExt, FramebufferAttachment.ColorAttachment0Ext, TextureTarget.Texture2D, textureHandle, 0);
//        GL.BindFramebuffer(FramebufferTarget.Framebuffer, 0);
//        Log.Error("Created Framebuffer: " + GL.GetError());
//    }
//	
//    public void CreateFromPNG(String filePath){
//        //check if the file exists
//        if ((new File(filePath)).exists) {
//            //make a bitmap out of the file on the disk
//        	Bit
//            System.Drawing.Bitmap textureBitmap = new System.Drawing.Bitmap(filePath);
//            //get the data out of the bitmap
//            System.Drawing.Imaging.BitmapData textureData =
//            textureBitmap.LockBits(
//                    new System.Drawing.Rectangle(0, 0, textureBitmap.Width, textureBitmap.Height),
//                    System.Drawing.Imaging.ImageLockMode.ReadOnly,
//                    System.Drawing.Imaging.PixelFormat.Format32bppArgb
//                );
//            if(textureBitmap.PixelFormat != System.Drawing.Imaging.PixelFormat.Format32bppArgb)
//            {
//                Log.Error("PNG Pixel format not supported ("+ filePath +") -> " + textureBitmap.PixelFormat.ToString());
//                return;
//            }
//            SurfaceFormat format = new SurfaceFormat();
//            format.Pixels = textureData.Scan0;
//            format.SourceType = PixelType.Byte;
//            Create(format);
//            //free the bitmap data (we dont need it anymore because it has been passed to the OpenGL driver
//            textureBitmap.UnlockBits(textureData);
//
//        }
//    }
}
